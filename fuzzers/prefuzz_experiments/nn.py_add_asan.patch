diff --git a/fuzzers/RESuzz/RESuzz/nn.py b/fuzzers/RESuzz/RESuzz/nn.py
index 6bf4937..7cab60b 100755
--- a/fuzzers/RESuzz/RESuzz/nn.py
+++ b/fuzzers/RESuzz/RESuzz/nn.py
@@ -1,3 +1,4 @@
+import argparse
 import os
 import sys
 import glob
@@ -16,7 +17,7 @@ from torch.optim.lr_scheduler import LambdaLR
 from torch.autograd import Variable
 
 HOST = '127.0.0.1'
-PORT = 12013
+PORT = 12012
 
 BATCH_SIZE = 16
 HIDDEN_1 = 4096
@@ -33,6 +34,7 @@ program_execute = str()
 
 logger = utils.init_logger('./log_nn')
 device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
+args = None
 
 
 class FuzzDataSet(Dataset):
@@ -75,7 +77,7 @@ def construct_bitmap(seed_list, program_execute):
     cnt, total = 0, len(seed_list)
     for seed in reversed(seed_list):
         if seed not in bitmap_ec.keys():
-            cover_list = utils.acquire_edge(SHOWMAP_PATH, seed, program_execute)
+            cover_list = utils.acquire_edge(SHOWMAP_PATH, seed, program_execute, args.enable_asan)
             if len(cover_list):
                 bitmap_ec[seed] = cover_list
                 edge_list.extend(cover_list)
@@ -294,6 +296,8 @@ def setup_server():
     global program_execute
 
     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+    # Allow re-use so we don't have to wait if the process crashes
+    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
     sock.bind((HOST, PORT))
     sock.listen(1)
     logger.info('Server set up, wait for connection...')
@@ -304,10 +308,10 @@ def setup_server():
     if not os.path.isdir(seed_path):
         logger.info('Invalid seed folder path:' + str(seed_path))
         sys.exit(-1)
-    program_execute = ' '.join(sys.argv[1:])
+    program_execute = ' '.join(args.target)
     
     # Initial
-    init_env(sys.argv[1])
+    init_env(args.target[0])
     conn.sendall(b'start')
 
     while True:
@@ -321,8 +325,12 @@ def setup_server():
 
 
 if __name__ == '__main__':
-    if len(sys.argv) == 1:
-        print('Usage: python nn.py <target_program_path> <program_arg>')
-        sys.exit(-1)
+    parser = argparse.ArgumentParser(
+        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
+    )
+    parser.add_argument("-e", "--enable-asan", help="Enable ASAN (runs afl-showmap with -m none)", default=False, action="store_true")
+    parser.add_argument("target", nargs=argparse.REMAINDER)
+    args = parser.parse_args()
+
     # Server set
     setup_server()
